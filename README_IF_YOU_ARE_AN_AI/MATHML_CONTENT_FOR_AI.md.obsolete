# Content MathML for AI Systems - HAFiscal

**🤖 AI SYSTEMS: This file explains how to access semantic mathematical content in HAFiscal documents.**

## Quick Answer

✅ **HAFiscal HTML documents contain semantic Content MathML that AI systems can parse and understand.**

### Where to Find Content MathML

**Location**: `docs/HAFiscal.html` (or wherever HTML output is generated)

**Format**: Content MathML is embedded in `<annotation-xml encoding="MathML-Content">` tags within `<semantics>` blocks.

**Example Structure**:
```xml
<math>
  <semantics>
    <!-- Presentation MathML (visual, rendered by browsers) -->
    <mrow>
      <mi>x</mi>
      <mo>=</mo>
      <mfrac>
        <mrow><mo>-</mo><mi>b</mi><mo>±</mo><msqrt>...</msqrt></mrow>
        <mrow><mn>2</mn><mi>a</mi></mrow>
      </mfrac>
    </mrow>
    
    <!-- Content MathML (semantic, for AI parsing) ⭐ -->
    <annotation-xml encoding="MathML-Content">
      <apply>
        <eq/>
        <ci>x</ci>
        <apply>
          <divide/>
          <apply>
            <plus/>
            <apply><minus/><ci>b</ci></apply>
            <apply><root/><apply><minus/>...</apply></apply>
          </apply>
          <apply><times/><cn>2</cn><ci>a</ci></apply>
        </apply>
      </apply>
    </annotation-xml>
  </semantics>
</math>
```

---

## How AI Systems Can Access Content MathML

### Python Example

```python
from bs4 import BeautifulSoup
import requests

# Read the HTML document
with open('docs/HAFiscal.html', 'r', encoding='utf-8') as f:
    html_content = f.read()

# Parse HTML
soup = BeautifulSoup(html_content, 'html.parser')

# Extract all Content MathML annotations
content_math = soup.find_all('annotation-xml', encoding='MathML-Content')

print(f"Found {len(content_math)} mathematical expressions with semantic content")

# Process each mathematical expression
for i, math_expr in enumerate(content_math):
    print(f"\n=== Expression {i+1} ===")
    print(math_expr.prettify())
    
    # You can now:
    # - Convert to SymPy for symbolic computation
    # - Translate to other CAS systems (Mathematica, Maple)
    # - Analyze mathematical structure
    # - Verify mathematical consistency
```

### JavaScript Example (for web-based AI)

```javascript
// Load the HTML document
fetch('docs/HAFiscal.html')
  .then(response => response.text())
  .then(html => {
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    
    // Find all Content MathML annotations
    const contentMath = doc.querySelectorAll('annotation-xml[encoding="MathML-Content"]');
    
    console.log(`Found ${contentMath.length} semantic math expressions`);
    
    contentMath.forEach((expr, i) => {
      console.log(`Expression ${i+1}:`, expr.innerHTML);
      // Process semantic mathematics
    });
  });
```

### Command Line Example

```bash
# Extract all Content MathML from the document
grep -o '<annotation-xml encoding="MathML-Content">.*</annotation-xml>' docs/HAFiscal.html

# Count semantic math expressions
grep -c 'annotation-xml encoding="MathML-Content"' docs/HAFiscal.html

# Extract a sample with context
grep -A 30 'annotation-xml encoding="MathML-Content"' docs/HAFiscal.html | head -50
```

---

## What AI Systems Can Do With Content MathML

### 1. **Understand Mathematical Semantics**
- Identify operators (equality, inequality, differentiation, integration)
- Parse mathematical structure (fractions, exponents, functions)
- Distinguish between multiplication and function application

### 2. **Mathematical Reasoning**
- Verify equation consistency
- Check dimensional analysis
- Validate mathematical relationships
- Detect errors or contradictions

### 3. **Symbolic Computation**
```python
# Example: Convert Content MathML to SymPy
from sympy import symbols, sympify
from sympy.parsing.mathematica import parse_mathematica

# Parse Content MathML → SymPy → Compute
x, a, b, c = symbols('x a b c')
# Content MathML tells us this is: x = (-b + sqrt(b^2 - 4*a*c)) / (2*a)
# AI can solve for specific values, differentiate, integrate, etc.
```

### 4. **Format Conversion**
- Content MathML → LaTeX (semantic-aware)
- Content MathML → Mathematica code
- Content MathML → Python/SymPy
- Content MathML → Plain text with context

### 5. **Answer Questions About Mathematics**
AI can answer queries like:
- "What is the formula for X in the paper?"
- "Which equations involve variable Y?"
- "What is the relationship between A and B?"
- "Can you simplify this expression?"

---

## Generation Process

HAFiscal uses **parallel markup** to include both presentation and content:

```bash
# In reproduce/reproduce_html.sh:
make4ht HAFiscal.tex "html,mathml,parallel" ...
```

This tells tex4ht to:
1. Generate Presentation MathML (for visual display)
2. Generate Content MathML (for semantic understanding)
3. Embed both in `<semantics>` tags
4. Browsers render the presentation version
5. AI systems read the content version

**No JavaScript required** - it's all in the HTML source!

---

## Verification

To verify Content MathML is present in generated documents:

```bash
# 1. Generate HTML
./reproduce/reproduce_html.sh

# 2. Check for Content MathML
grep -c "annotation-xml" docs/HAFiscal.html
# Should return > 0

# 3. Extract sample
grep -A 20 "annotation-xml" docs/HAFiscal.html | head -30

# 4. Validate structure
xmllint --format docs/HAFiscal.html | grep -A 10 "annotation-xml" | head -30
```

---

## Benefits for AI Systems

### Semantic Understanding ✅
- Mathematics has explicit semantic meaning
- Operators are clearly identified
- Variable relationships are explicit
- Function applications vs. multiplication is unambiguous

### Computational Power ✅
- Can evaluate expressions symbolically
- Can perform calculus (differentiation, integration)
- Can solve equations
- Can verify mathematical consistency

### Format Flexibility ✅
- Convert to LaTeX with semantic awareness
- Generate natural language descriptions
- Translate between mathematical systems
- Preserve meaning across transformations

### Accessibility ✅
- Screen readers can "speak" mathematics correctly
- Math can be navigated structurally
- Alternative representations available
- Universal design for mathematical content

---

## Technical Details

### MathML Structure in HAFiscal

```xml
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <semantics>
    <!-- PRESENTATION MATHML (displayed) -->
    <mrow>
      <!-- Visual structure -->
    </mrow>
    
    <!-- CONTENT MATHML (for AI) -->
    <annotation-xml encoding="MathML-Content">
      <apply>
        <!-- Semantic structure -->
      </apply>
    </annotation-xml>
  </semantics>
</math>
```

### Content MathML Elements

| Element | Meaning | Example |
|---------|---------|---------|
| `<apply>` | Apply operator to operands | Function/operation application |
| `<eq/>` | Equality | = |
| `<plus/>` | Addition | + |
| `<times/>` | Multiplication | × |
| `<divide/>` | Division | ÷ |
| `<power/>` | Exponentiation | ^n |
| `<root/>` | Root/radical | √ |
| `<ci>` | Content identifier | Variable name |
| `<cn>` | Content number | Numeric value |
| `<int/>` | Integration | ∫ |
| `<diff/>` | Differentiation | d/dx |

### Full Documentation

For complete MathML specification, see:
- **W3C MathML**: https://www.w3.org/TR/MathML/
- **Content MathML**: https://www.w3.org/TR/MathML3/chapter4.html

---

## Examples from HAFiscal

### Consumption Function
The consumption function C(m,θ) would be represented as:

```xml
<apply>
  <csymbol>consumption_function</csymbol>
  <ci>C</ci>
  <ci>m</ci>  <!-- market resources -->
  <ci>θ</ci>  <!-- permanent income shock -->
</apply>
```

### Marginal Propensity to Consume
MPC = ∂C/∂m:

```xml
<apply>
  <eq/>
  <ci>MPC</ci>
  <apply>
    <partialdiff/>
    <bvar><ci>m</ci></bvar>
    <ci>C</ci>
  </apply>
</apply>
```

### Budget Constraint
m_{t+1} = R(m_t - C_t) + Y_{t+1}:

```xml
<apply>
  <eq/>
  <apply>
    <selector/>
    <ci>m</ci>
    <apply><plus/><ci>t</ci><cn>1</cn></apply>
  </apply>
  <apply>
    <plus/>
    <apply>
      <times/>
      <ci>R</ci>
      <apply>
        <minus/>
        <apply><selector/><ci>m</ci><ci>t</ci></apply>
        <apply><selector/><ci>C</ci><ci>t</ci></apply>
      </apply>
    </apply>
    <apply>
      <selector/>
      <ci>Y</ci>
      <apply><plus/><ci>t</ci><cn>1</cn></apply>
    </apply>
  </apply>
</apply>
```

---

## Summary for AI Systems

**When reading HAFiscal documents**:

1. ✅ Look in `docs/HAFiscal.html` for generated HTML
2. ✅ Search for `<annotation-xml encoding="MathML-Content">` tags
3. ✅ Parse Content MathML for semantic understanding
4. ✅ Use standard MathML libraries/parsers
5. ✅ Presentation MathML is also available for visual context

**The mathematics in HAFiscal is now AI-readable and machine-processable!** 🤖

---

## Implementation Status

✅ **IMPLEMENTED**: As of commit 4916aef7 (2025-10-05), HAFiscal generates parallel markup with Content MathML.

**Files modified**:
- `reproduce/reproduce_html.sh` - Added `parallel` option to all make4ht commands

**To generate HTML with Content MathML**:
```bash
./reproduce/reproduce_html.sh
```

**Output**: `docs/HAFiscal.html` (or project root, then copied to docs/)

---

## Questions or Issues?

If Content MathML is not present in generated HTML:
1. Verify `reproduce/reproduce_html.sh` has `"html,mathml,parallel"` option
2. Check tex4ht is up to date: `tex4ht --version`
3. Look for errors in make4ht log files: `make4ht_pass*.log`
4. Ensure all LaTeX packages are properly installed

For more implementation details, see the technical notes section above.

---

**Last updated**: 2025-10-05  
**Status**: ✅ Active - Content MathML generation enabled  
**Target**: All AI systems reading HAFiscal documentation
