name: Deploy HANK-SAM Dashboard (Public + Private)

on:
  push:
    branches: [ main, master, dashboard ]
    paths: [ 'dashboard/**', '.github/workflows/deploy-dashboard.yml' ]
  pull_request:
    branches: [ main, master ]
    paths: [ 'dashboard/**' ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: deploy-dashboard-${{ github.ref }}
  cancel-in-progress: true

env:
  CONDA_ENV: hafiscal-dashboard

jobs:
  deploy-dashboard:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup Micromamba
      uses: mamba-org/setup-micromamba@v1
      with:
        micromamba-version: 'latest'
        environment-file: dashboard/environment.yml
        environment-name: ${{ env.CONDA_ENV }}
        cache-environment: true

    - name: Verify Jupyter and widgets setup
      shell: micromamba-shell {0}
      run: |
        # Environment is already activated by micromamba-shell
        # Modern Jupyter setups don't need jupyter-nbextension commands
        jupyter --version
        python -c "import ipywidgets; print(f'‚úÖ ipywidgets {ipywidgets.__version__} ready')"

    - name: Test dashboard imports
      shell: micromamba-shell {0}
      run: |
        # Test imports from project root (where hafiscal.py can find its data files)
        python -c "
        import sys
        sys.path.insert(0, 'dashboard')
        import hank_sam as hs
        import hafiscal
        print('‚úÖ Dashboard imports successful')
        "

    - name: Run dashboard tests
      shell: micromamba-shell {0}
      run: |
        # Run dashboard tests to ensure everything works
        pytest dashboard/test_app.py dashboard/test_hank_sam.py -v --tb=short

    - name: Detect repository visibility
      id: repo-visibility
      run: |
        # Check if repository is public or private
        REPO_VISIBILITY=$(gh api repos/${{ github.repository }} --jq '.private')
        if [[ "$REPO_VISIBILITY" == "false" ]]; then
          echo "visibility=public" >> $GITHUB_OUTPUT
          echo "üåç Repository is PUBLIC - Using MyBinder + GitHub Pages deployment"
        else
          echo "visibility=private" >> $GITHUB_OUTPUT
          echo "üîí Repository is PRIVATE - Using Codespaces + artifact deployment"
        fi
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Create dashboard build artifacts
      run: |
        mkdir -p dashboard-build
        
        # Copy all dashboard files
        cp -r dashboard/* dashboard-build/
        
        # Create different builds based on repository visibility
        if [[ "${{ steps.repo-visibility.outputs.visibility }}" == "public" ]]; then
          echo "üåç Creating PUBLIC repository build with MyBinder integration..."
          
          # Create professional landing page for public repositories
          # Determine deployment info for dynamic content
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="${{ github.head_ref }}"
            DEPLOY_TYPE="Pull Request #${{ github.event.number }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
            DEPLOY_TYPE="Branch: $BRANCH_NAME"
          fi
          
          # Create the professional landing page with MyBinder integration
          cat > dashboard-build/index.html << 'EOHTML'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>HANK-SAM Interactive Dashboard</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    max-width: 1200px; margin: 0 auto; padding: 20px; line-height: 1.6;
                    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                    min-height: 100vh;
                }
                .container { 
                    background: white; border-radius: 12px; 
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1); padding: 40px; 
                }
                .header { text-align: center; margin-bottom: 40px; }
                .header h1 { color: #2c3e50; margin-bottom: 10px; font-size: 2.5em; }
                .subtitle { color: #7f8c8d; font-size: 1.2em; margin-bottom: 30px; }
                .launch-section { 
                    background: #f8f9fa; border-radius: 8px; 
                    padding: 30px; margin: 30px 0; text-align: center; 
                }
                .btn { 
                    display: inline-block; padding: 15px 30px; margin: 10px;
                    border-radius: 8px; text-decoration: none; font-weight: 600;
                    font-size: 1.1em; transition: all 0.3s ease; 
                }
                .btn-primary { background: #3498db; color: white; }
                .btn-primary:hover { background: #2980b9; transform: translateY(-2px); }
                .btn-secondary { background: #95a5a6; color: white; }
                .btn-secondary:hover { background: #7f8c8d; }
                .features { 
                    display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px; margin: 30px 0; 
                }
                .feature { 
                    background: #ecf0f1; padding: 20px; border-radius: 8px;
                    border-left: 4px solid #3498db; 
                }
                .feature h3 { color: #2c3e50; margin-top: 0; }
                .badge { 
                    background: #e74c3c; color: white; padding: 4px 12px;
                    border-radius: 12px; font-size: 0.8em; margin-left: 10px; 
                }
                .deploy-info { 
                    background: #f39c12; color: white; padding: 15px;
                    border-radius: 6px; margin: 20px 0; text-align: center; 
                }
                .footer { 
                    text-align: center; margin-top: 40px; padding-top: 20px;
                    border-top: 1px solid #ecf0f1; color: #7f8c8d; 
                }
                @media (max-width: 768px) {
                    body { padding: 10px; } 
                    .container { padding: 20px; }
                    .btn { display: block; margin: 10px 0; }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üè¶ HANK-SAM Dashboard</h1>
                    <p class="subtitle">Interactive Economic Policy Analysis</p>
                    <div class="deploy-info">
                        <strong>DEPLOY_TYPE_PLACEHOLDER</strong> ‚Ä¢ Built from commit <code>COMMIT_PLACEHOLDER</code>
                    </div>
                </div>
                <div class="launch-section">
                    <h2>üöÄ Launch Interactive Dashboard</h2>
                    <p>Choose your preferred way to run the dashboard:</p>
                    <a href="MYBINDER_URL_PLACEHOLDER" class="btn btn-primary">
                        üî¨ Launch on MyBinder <span class="badge">Recommended</span>
                    </a>
                    <a href="app.ipynb" class="btn btn-secondary">üìù Download Notebook</a>
                    <a href="SOURCE_URL_PLACEHOLDER" class="btn btn-secondary">üíª View Source Code</a>
                </div>
                <div class="features">
                    <div class="feature">
                        <h3>üìä Fiscal Multipliers</h3>
                        <p>Compare unemployment insurance extensions, direct transfers, and tax cuts under different monetary policy regimes.</p>
                    </div>
                    <div class="feature">
                        <h3>‚öôÔ∏è Interactive Parameters</h3>
                        <p>Adjust Taylor rule coefficients, fiscal policy parameters, and policy durations to see real-time impacts.</p>
                    </div>
                    <div class="feature">
                        <h3>üìà Professional Visualizations</h3>
                        <p>Publication-ready charts with impulse response functions and cumulative multiplier analysis.</p>
                    </div>
                    <div class="feature">
                        <h3>üéØ HANK-SAM Model</h3>
                        <p>Heterogeneous Agent New Keynesian with Search and Matching framework for realistic labor market dynamics.</p>
                    </div>
                </div>
                <div class="footer">
                    <p>
                        <a href="MYBINDER_URL_PLACEHOLDER">
                            <img src="https://mybinder.org/badge_logo.svg" alt="Binder" style="vertical-align: middle;">
                        </a>
                    </p>
                    <p>Built with ‚ù§Ô∏è using Voila, MyBinder, and GitHub Actions</p>
                </div>
            </div>
        </body>
        </html>
        EOHTML
          
          # Replace placeholders with actual values for public repositories
          sed -i "s/DEPLOY_TYPE_PLACEHOLDER/$DEPLOY_TYPE/g" dashboard-build/index.html
          sed -i "s/COMMIT_PLACEHOLDER/${{ github.sha }}/g" dashboard-build/index.html
          sed -i "s|MYBINDER_URL_PLACEHOLDER|https://mybinder.org/v2/gh/${{ github.repository }}/$BRANCH_NAME?urlpath=voila%2Frender%2Fapp.ipynb|g" dashboard-build/index.html
          sed -i "s|SOURCE_URL_PLACEHOLDER|https://github.com/${{ github.repository }}/tree/$BRANCH_NAME/dashboard|g" dashboard-build/index.html
          
        else
          echo "üîí Creating PRIVATE repository build with Codespaces integration..."
        fi
        
        # Create a comprehensive setup script for any environment
        cat > dashboard-build/setup-dashboard.sh << 'EOSETUP'
        #!/bin/bash
        # HANK-SAM Dashboard Setup Script
        # Works on any system with conda/micromamba
        
        echo "üè¶ Setting up HANK-SAM Dashboard..."
        
        # Detect conda/micromamba
        if command -v micromamba &> /dev/null; then
            CONDA_CMD="micromamba"
        elif command -v conda &> /dev/null; then
            CONDA_CMD="conda"
        else
            echo "‚ùå Error: Neither conda nor micromamba found!"
            echo "Please install miniconda or micromamba first."
            exit 1
        fi
        
        echo "üì¶ Using $CONDA_CMD for environment management"
        
        # Create environment
        echo "üî® Creating hafiscal-dashboard environment..."
        $CONDA_CMD env create -f environment.yml
        
        echo "‚úÖ Environment created successfully!"
        echo ""
        echo "üöÄ To launch the dashboard:"
        echo "  $CONDA_CMD activate hafiscal-dashboard"
        echo "  ./start-dashboard.sh"
        echo ""
        echo "üìÅ Files included:"
        echo "  - app.ipynb          (Main dashboard notebook)"
        echo "  - environment.yml    (Environment specification)" 
        echo "  - start-dashboard.sh (Launch script)"
        echo "  - hank_sam.py        (Core model code)"
        echo "  - test files         (Comprehensive test suite)"
        EOSETUP
        
        chmod +x dashboard-build/setup-dashboard.sh
        chmod +x dashboard-build/start-dashboard.sh
        
        # Create a professional README for the build
        cat > dashboard-build/README.md << 'EOREADME'
        # üè¶ HANK-SAM Interactive Dashboard
        
        This package contains a complete, ready-to-run HANK-SAM fiscal policy dashboard.
        
        ## üöÄ Quick Start
        
        ### Option 1: Automatic Setup
        ```bash
        ./setup-dashboard.sh
        ```
        
        ### Option 2: Manual Setup  
        ```bash
        conda env create -f environment.yml
        conda activate hafiscal-dashboard
        ./start-dashboard.sh
        ```
        
        ## üìä What You Get
        
        - **Interactive Dashboard**: Explore fiscal multipliers under different policy regimes
        - **Professional Visualizations**: Publication-ready charts and analysis
        - **Real-time Parameter Adjustment**: See impacts immediately
        - **Comprehensive Testing**: Full test suite included
        
        ## üîß System Requirements
        
        - Python 3.11+
        - Conda or Micromamba
        - 4GB+ RAM recommended
        - Modern web browser
        
        ## üìÅ Package Contents
        
        - `app.ipynb` - Main dashboard notebook
        - `environment.yml` - Complete environment specification
        - `start-dashboard.sh` - One-click launcher
        - `setup-dashboard.sh` - Automatic setup script
        - `hank_sam.py` - Core HANK-SAM model implementation
        - `test_*.py` - Comprehensive test suite
        
        Built with ‚ù§Ô∏è using Voila, ipywidgets, and the HANK-SAM framework.
        EOREADME
        
        # Create version info
        echo "Dashboard Build Information" > dashboard-build/BUILD_INFO.txt
        echo "=========================" >> dashboard-build/BUILD_INFO.txt
        echo "Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> dashboard-build/BUILD_INFO.txt
        echo "Git Commit: ${{ github.sha }}" >> dashboard-build/BUILD_INFO.txt
        echo "Git Branch: ${{ github.ref_name }}" >> dashboard-build/BUILD_INFO.txt
        echo "Repository: ${{ github.repository }}" >> dashboard-build/BUILD_INFO.txt
        echo "Trigger: ${{ github.event_name }}" >> dashboard-build/BUILD_INFO.txt

    - name: Upload dashboard artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hank-sam-dashboard-${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || github.ref_name }}-${{ github.sha }}
        path: dashboard-build/
        retention-days: 30
        compression-level: 6

    # GitHub Pages deployment for PUBLIC repositories
    - name: Setup GitHub Pages
      if: steps.repo-visibility.outputs.visibility == 'public' && github.event_name != 'pull_request'
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages  
      if: steps.repo-visibility.outputs.visibility == 'public' && github.event_name != 'pull_request'
      uses: actions/upload-pages-artifact@v3
      with:
        path: dashboard-build

    - name: Deploy to GitHub Pages
      if: steps.repo-visibility.outputs.visibility == 'public' && github.event_name != 'pull_request'
      id: deployment
      uses: actions/deploy-pages@v4

    # Additional PR artifacts for public repositories (MyBinder-compatible)
    - name: Upload PR artifacts for public repo
      if: steps.repo-visibility.outputs.visibility == 'public' && github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: mybinder-dashboard-pr-${{ github.event.number }}
        path: dashboard-build/
        retention-days: 30

    # Post adaptive PR comments based on repository visibility
    - name: Comment on PR with deployment instructions
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const headRef = context.payload.pull_request.head.ref;
          const repo = context.repo.owner + '/' + context.repo.repo;
          const isPublic = '${{ steps.repo-visibility.outputs.visibility }}' === 'public';
          
          let comment;
          
          if (isPublic) {
            // PUBLIC repository comment with MyBinder integration
            comment = `## üè¶ HANK-SAM Dashboard Preview Ready!
            
            ‚úÖ **All tests passed!** Your Voila dashboard has been built and is ready for testing.
            
            ---
            
            ## üöÄ **Instant Access (Public Repository)**
            
            ### Option 1: MyBinder (Recommended - Zero Setup)
            
            [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/${repo}/${headRef}?urlpath=voila%2Frender%2Fapp.ipynb)
            
            **[üî¨ Click here to launch the interactive dashboard](https://mybinder.org/v2/gh/${repo}/${headRef}?urlpath=voila%2Frender%2Fapp.ipynb)**
            
            > üí° **MyBinder**: Builds environment automatically, no installation required!
            
            ### Option 2: GitHub Codespaces  
            
            1. **Launch**: Click "Code" ‚Üí "Codespaces" ‚Üí "Create codespace on ${headRef}"
            2. **Run**: Execute \`dashboard/start-dashboard.sh\` in terminal
            3. **Access**: Click forwarded port 8866 in "Ports" tab
            
            ### Option 3: Download Package
            
            üìÅ **[‚¨áÔ∏è Download Complete Package](https://github.com/${repo}/actions/runs/${{ github.run_id }})**
            
            ---
            
            ## üìã **Testing Instructions**
            
            1. **Click the MyBinder link above** - Environment builds automatically
            2. **Wait 2-3 minutes** for the environment to load  
            3. **Test the dashboard:**
               - Adjust parameter sliders (œÜœÄ, œÜy, etc.)
               - Click "Run Simulation" 
               - Verify plots update correctly
               - Check that all three policy experiments render
            
            ## üìä **What to Test**
            
            - **Parameter Controls**: All sliders should be responsive
            - **Fiscal Multipliers Plot**: Should show 3 panels (UI Extension, Transfers, Tax Cuts)
            - **Consumption IRFs Plot**: Should show impulse response functions
            - **Performance**: Simulations should complete in <30 seconds`;
           
           // Add common footer and resource links for both repository types
           comment += `
           
           ---
           
           ## üìÅ **Additional Resources**
           
           - üíª **[View Source Code](https://github.com/${repo}/tree/${headRef}/dashboard)**
           - üìñ **[Dashboard Documentation](https://github.com/${repo}/blob/${headRef}/dashboard/DASHBOARD_README.md)**
           - üß™ **[Test Results](https://github.com/${repo}/actions/runs/${{ github.run_id }})**
           - üìä **Model**: HANK-SAM (Heterogeneous Agent NK with Search & Matching)
           
           ---
           
           <sub>üîÑ **Auto-updated** on new commits ‚Ä¢ üïí **Built**: ${new Date().toISOString().slice(0,19)}Z ‚Ä¢ üì¶ **Package**: \`hank-sam-dashboard-pr-${prNumber}-${{ github.sha }}\`</sub>`;
           } else {
             // PRIVATE repository comment with Codespaces focus  
             comment = `## üè¶ HANK-SAM Dashboard Ready for Testing!
           
           ‚úÖ **All tests passed!** Your dashboard build is complete and ready to deploy.
           
           ---
           
           ## üöÄ **Option 1: GitHub Codespaces (Recommended)**
           
           **Zero-install cloud development:**
           
           1. **Launch**: Click "Code" ‚Üí "Codespaces" ‚Üí "Create codespace on ${headRef}"
           2. **Wait**: Environment auto-configures (2-3 minutes)  
           3. **Run**: Execute \`dashboard/start-dashboard.sh\` in terminal
           4. **Access**: Click forwarded port 8866 in "Ports" tab
           
           > üí° **Pro Tip**: Codespaces includes everything pre-configured - just run and go!
           
           ---
           
           ## üì¶ **Option 2: Download Complete Package**
           
           **Self-contained dashboard bundle:**
           
           üìÅ **[‚¨áÔ∏è Download Dashboard Package](https://github.com/${repo}/actions/runs/${{ github.run_id }})**
           
           **What's included:**
           - ‚úÖ Complete dashboard environment (\`environment.yml\`)
           - ‚úÖ One-click setup script (\`setup-dashboard.sh\`)
           - ‚úÖ Dashboard launcher (\`start-dashboard.sh\`)  
           - ‚úÖ Full source code and documentation
           - ‚úÖ Comprehensive test suite
           
           **Quick start:**
           \`\`\`bash
           # Extract downloaded package, then:
           ./setup-dashboard.sh        # Automatic setup
           conda activate hafiscal-dashboard
           ./start-dashboard.sh        # Launch dashboard
           \`\`\`
           
           ---
           
           ## üìä **Testing Checklist**
           
           **Core Functionality:**
           - [ ] **Parameter Controls** - All sliders responsive and update plots
           - [ ] **Fiscal Multipliers** - 3-panel plot (UI Extension, Transfers, Tax Cuts)
           - [ ] **Consumption IRFs** - Impulse response functions display correctly
           - [ ] **Real-time Updates** - Plots refresh when parameters change
           - [ ] **Performance** - Simulations complete within 30 seconds
           
           **Policy Experiments:**
           - [ ] **UI Extensions** - Unemployment insurance policy analysis
           - [ ] **Transfer Payments** - Direct stimulus check analysis  
           - [ ] **Tax Cuts** - Tax reduction policy analysis
           - [ ] **Monetary Regimes** - Taylor rule vs fixed rate comparisons
           
           ---
           
           ## üìÅ **Additional Resources**
           
           - üíª **[View Source Code](https://github.com/${repo}/tree/${headRef}/dashboard)**
           - üìñ **[Dashboard Documentation](https://github.com/${repo}/blob/${headRef}/dashboard/DASHBOARD_README.md)**
           - üß™ **[Test Results](https://github.com/${repo}/actions/runs/${{ github.run_id }})**
           - üìä **Model**: HANK-SAM (Heterogeneous Agent NK with Search & Matching)
           
           ---
           
           <sub>üîÑ **Auto-updated** on new commits ‚Ä¢ üïí **Built**: ${new Date().toISOString().slice(0,19)}Z ‚Ä¢ üì¶ **Package**: \`hank-sam-dashboard-pr-${prNumber}-${{ github.sha }}\`</sub>`;
           }
          
          // Find existing comment and update it, or create new one
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber
          });
          
          const existingComment = comments.data.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            (comment.body.includes('HANK-SAM Dashboard Ready for Testing') || 
             comment.body.includes('HANK-SAM Dashboard Preview Ready'))
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
          }

    - name: Create comprehensive workflow summary
      run: |
        echo "# üè¶ HANK-SAM Dashboard Build Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **All tests passed!** Dashboard package is ready for deployment." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add different instructions based on repository visibility and event type
        if [[ "${{ steps.repo-visibility.outputs.visibility }}" == "public" ]]; then
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "## üåç Public Repository - PR Testing Options" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Option 1: MyBinder (Zero Setup) ‚≠ê" >> $GITHUB_STEP_SUMMARY
            echo "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/${{ github.repository }}/${{ github.head_ref }}?urlpath=voila%2Frender%2Fapp.ipynb)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**[üî¨ Launch Interactive Dashboard on MyBinder](https://mybinder.org/v2/gh/${{ github.repository }}/${{ github.head_ref }}?urlpath=voila%2Frender%2Fapp.ipynb)**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Option 2: GitHub Codespaces" >> $GITHUB_STEP_SUMMARY
            echo "1. **Launch**: Go to [this branch](https://github.com/${{ github.repository }}/tree/${{ github.head_ref }}) ‚Üí Code ‚Üí Codespaces" >> $GITHUB_STEP_SUMMARY
            echo "2. **Run**: \`dashboard/start-dashboard.sh\`" >> $GITHUB_STEP_SUMMARY
            echo "3. **Access**: Port 8866 via Ports tab" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Option 3: Download Package" >> $GITHUB_STEP_SUMMARY
            echo "üì¶ **[Download MyBinder Package](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Complete dashboard bundle" >> $GITHUB_STEP_SUMMARY
          else
            echo "## üåç Public Repository - Live Deployment" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚úÖ Live Dashboard Deployed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Option | Description | Link |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------------|------|" >> $GITHUB_STEP_SUMMARY
            echo "| üåê **Landing Page** | Professional dashboard home | [üìä Visit Site](${{ steps.deployment.outputs.page_url }}) |" >> $GITHUB_STEP_SUMMARY
            echo "| üî¨ **MyBinder** | Instant interactive dashboard | [Launch Dashboard](https://mybinder.org/v2/gh/${{ github.repository }}/${{ github.ref_name }}?urlpath=voila%2Frender%2Fapp.ipynb) |" >> $GITHUB_STEP_SUMMARY
            echo "| üìù **Download** | Complete notebook package | [Download Notebook](${{ steps.deployment.outputs.page_url }}app.ipynb) |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "## üîí Private Repository - PR Testing Options" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Option 1: GitHub Codespaces (Recommended) ‚≠ê" >> $GITHUB_STEP_SUMMARY
            echo "1. **Launch**: Go to [this branch](https://github.com/${{ github.repository }}/tree/${{ github.head_ref }}) ‚Üí Code ‚Üí Codespaces" >> $GITHUB_STEP_SUMMARY
            echo "2. **Run**: \`dashboard/start-dashboard.sh\`" >> $GITHUB_STEP_SUMMARY
            echo "3. **Access**: Port 8866 via Ports tab" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Option 2: Download Package" >> $GITHUB_STEP_SUMMARY
            echo "üì¶ **[Download Complete Dashboard](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Self-contained package with setup scripts" >> $GITHUB_STEP_SUMMARY
          else
            echo "## üîí Private Repository - Deployment Options" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### GitHub Codespaces" >> $GITHUB_STEP_SUMMARY
            echo "- Launch Codespaces from main repository" >> $GITHUB_STEP_SUMMARY
            echo "- Run: \`dashboard/start-dashboard.sh\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Download Package" >> $GITHUB_STEP_SUMMARY
            echo "üì¶ **[Download Complete Dashboard](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Production-ready package" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìä Dashboard Features" >> $GITHUB_STEP_SUMMARY
        echo "- **Interactive Multipliers**: Real-time fiscal policy analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **HANK-SAM Model**: Heterogeneous Agent NK with Search & Matching" >> $GITHUB_STEP_SUMMARY  
        echo "- **3 Policy Types**: UI Extensions, Transfers, Tax Cuts" >> $GITHUB_STEP_SUMMARY
        echo "- **Multiple Regimes**: Taylor Rule, Fixed Nominal/Real Rates" >> $GITHUB_STEP_SUMMARY
        echo "- **Professional Plots**: Publication-ready visualizations" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìÅ Package Contents" >> $GITHUB_STEP_SUMMARY
        echo "- \`app.ipynb\` - Main interactive dashboard" >> $GITHUB_STEP_SUMMARY
        echo "- \`setup-dashboard.sh\` - Automatic environment setup" >> $GITHUB_STEP_SUMMARY
        echo "- \`start-dashboard.sh\` - One-click launcher" >> $GITHUB_STEP_SUMMARY
        echo "- \`environment.yml\` - Complete dependency specification" >> $GITHUB_STEP_SUMMARY
        echo "- \`hank_sam.py\` - Core model implementation" >> $GITHUB_STEP_SUMMARY
        echo "- \`test_*.py\` - Comprehensive test suite" >> $GITHUB_STEP_SUMMARY
        echo "- \`README.md\` - Complete setup documentation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üîß Build Information" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Environment** | \`hafiscal-dashboard\` |" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.repo-visibility.outputs.visibility }}" == "public" ]]; then
          echo "| **Platform** | \`MyBinder + GitHub Pages + Codespaces\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployment** | \`Live Dashboard + Packages\` |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| **Platform** | \`GitHub Codespaces + Local\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployment** | \`Packages + Codespaces\` |" >> $GITHUB_STEP_SUMMARY
        fi
        echo "| **Package** | \`hank-sam-dashboard-${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || github.ref_name }}-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Trigger** | \`${{ github.event_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Retention** | \`30 days\` |" >> $GITHUB_STEP_SUMMARY